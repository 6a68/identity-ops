#!/bin/bash

usage()
{
  cat <<EOF
  Usage: `basename $0` -d DATABASE [-i 10.1.2.3] [-m 1234] [-c 60] [-w 30]
  
  Runs pt-heartbeat to determine the replication health of the slave
  
  -d : Database name
  -i : IP address of the master DB (Required if "-m" isn't provided). This IP is converted to a Master ID
  -m : Master ID (Required if "-i" isn't provided)
  -c : Seconds of replication beyond which a critical state will be returned [Default : 60]
  -w : Seconds of replication beyond which a warning state will be returned [Default : 30]
EOF
  exit 0
}

ip2dec () {
    local a b c d ip=$@
    IFS=. read -r a b c d <<< "$ip"
    printf '%d\n' "$((a * 256 ** 3 + b * 256 ** 2 + c * 256 + d))"
}

while getopts ":d:c:w:i:m" options; do
  case $options in
    d ) DATABASE=$OPTARG;;
    c ) CRITICAL_THRESHOLD=$OPTARG;;
    w ) WARNING_THRESHOLD=$OPTARG;;
    i ) MASTER_DB_IP=$OPTARG;;
    m ) MASTER_DB_ID=$OPTARG;;
    h ) usage;;
    \? ) usage
         exit 1;;
    * ) usage
          exit 1;;

  esac
done

if [ -z "$CRITICAL_THRESHOLD" ]; then
  CRITICAL_THRESHOLD=60
fi

if [ -z "$WARNING_THRESHOLD" ]; then
  WARNING_THRESHOLD=30
fi

if [ "$MASTER_DB_IP" -a "$MASTER_DB_ID" ]; then
  echo "UNKNOWN: Please only set either the Master IP ("-i") or the Master ID ("-m"), not both"
  exit 3
fi

if [ -z "$DATABASE" ]; then
    echo "UNKNOWN: Database not set, please set the database with "-d""
    exit 3
fi

if [ "$MASTER_DB_IP" ]; then
  MASTER_DB_ID="`ip2dec $MASTER_DB_IP`"
fi

lag=$(pt-heartbeat -D $DATABASE -u root --master-server-id $MASTER_DB_ID --check)
rc=$?
if [ $rc -ne 0 ]; then
    echo "UNKNOWN: error running pt-heartbeat (rc=$rc)"
    exit 3
fi

if [[ ${lag%%.*} -gt $CRITICAL_THRESHOLD ]]; then
    echo "CRITICAL: replication lag is $lag seconds (> $CRITICAL_THRESHOLD)"
    exit 2
elif [[ ${lag%%.*} -gt $WARNING_THRESHOLD ]]; then
    echo "WARNING: replication lag is $lag seconds (> $WARNING_THRESHOLD)"
    exit 1
fi

echo "OK: replication lag is $lag seconds"
exit 0
